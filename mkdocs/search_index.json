{
    "docs": [
        {
            "location": "/", 
            "text": "PackageFileSearch\n\n\nSearch and navigate Sublime Text packages.\n\n\n\n\nOverview\n\n\nPackageFileSearch is plugin designed to allow a user to search all default, installed, and unpacked plugins for specific files.\n\n\nI have no intention to put this on Package Control at this time.  This is more of a personal plugin.  A good alternative is \nhttps://sublime.wbond.net/packages/PackageResourceViewer\n which is available via Package Control.", 
            "title": "About PackageFileSearch"
        }, 
        {
            "location": "/#packagefilesearch", 
            "text": "Search and navigate Sublime Text packages.", 
            "title": "PackageFileSearch"
        }, 
        {
            "location": "/#overview", 
            "text": "PackageFileSearch is plugin designed to allow a user to search all default, installed, and unpacked plugins for specific files.  I have no intention to put this on Package Control at this time.  This is more of a personal plugin.  A good alternative is  https://sublime.wbond.net/packages/PackageResourceViewer  which is available via Package Control.", 
            "title": "Overview"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nInstalling PackageFileSearch.\n\n\n\n\nGit Cloning\n\n\n\n\n\n\nQuit Sublime Text.\n\n\n\n\n\n\nOpen a terminal:\n\n\ncd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/PackageFileSearch.git PackageFileSearch\n\n\n\n\n\n\n\n\n\n3 Restart Sublime Text.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "Installing PackageFileSearch.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#git-cloning", 
            "text": "Quit Sublime Text.    Open a terminal:  cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/PackageFileSearch.git PackageFileSearch    3 Restart Sublime Text.", 
            "title": "Git Cloning"
        }, 
        {
            "location": "/usage/", 
            "text": "User Guide\n\n\nConfiguration and usage of PackageFileSearch.\n\n\n\n\nOverview\n\n\nIn order to use Package File Search, you can use one of the five commands:\n\n\n\n\nPackage File Search: Navigator\n\n\nPackage File Search: Extract\n\n\nPackage File Search: Search Menu\n\n\nPackage File Search: Find Panel\n\n\nPackage File Search: Set Color Scheme File\n\n\n\n\nPackage File Search: Navigator\n\n\nThis is a command that allows you to navigate all the plugins.  It allows you to navigate their file system even if they are archived in a sublime-package zip.  If plugins have some parts in a zip, and some parts unpacked overriding parts in the zip, PackageFileSearch will show a composite of the two with the override file taking precedence.  Unarchived files will open in an editable view.  Archived files will open in a read only view; you cannot directly modify the zipped files.\n\n\nPackage File Search: Extract\n\n\nThe extract command allows you to unpack an archived plugin into the \nPackages\n folder if it has not already been done.\n\n\nPackage File Search: Search Menu\n\n\nWith this command, a menu of pre-defined searches will be displayed.  When one is selected, all of the packages will be searched based on the selected pre-defined search pattern.  This will search only the current active plugin files. If you toggle \nFind All\n mode via the \nPackage File Search: Toggle Find All Mode\n command, it will search and find override files and the original file and even disabled plugins.  Duplicate results will be distinguished by their install location: \nDefault\n, \nInstalled Packages\n, and \nPackages\n.  When \nFind All\n mode is active, the command will be shown in the command palette as \nPackage File Search: Search Menu (Find All)\n.\n\n\nYou can add to the pre-defined list or change it completely in the \npackage_file_search.sublime-settings\n file.  The setting name is \npattern_list\n and it has 3 configurable parameters:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncaption\n\n\nThe desired name to show up in the menu.\n\n\n\n\n\n\nsearch\n\n\nThe search settings to be used (\npattern\n and \nregex\n).\n\n\n\n\n\n\npattern\n\n\nThe wild card or regex pattern to be used.\n\n\n\n\n\n\nregex\n\n\nWhether the pattern is a regex pattern or not.\n\n\n\n\n\n\n\n\nExamples\n:\n\n\n    \n// Default pre-set patterns\n\n    \npattern_list\n:\n \n[\n\n        \n{\ncaption\n:\n \nColor Schemes\n,\n         \nsearch\n:\n \n{\npattern\n:\n \n*.tmTheme\n,\n          \nregex\n:\n \nfalse\n}},\n\n        \n{\ncaption\n:\n \nCommands\n,\n              \nsearch\n:\n \n{\npattern\n:\n \n*.sublime-commands\n,\n \nregex\n:\n \nfalse\n}},\n\n        \n{\ncaption\n:\n \nKeymaps\n,\n               \nsearch\n:\n \n{\npattern\n:\n \n*.sublime-keymap\n,\n   \nregex\n:\n \nfalse\n}},\n\n        \n{\ncaption\n:\n \nLanguage Syntaxes\n,\n     \nsearch\n:\n \n{\npattern\n:\n \n*tmLanguage\n,\n        \nregex\n:\n \nfalse\n}},\n\n        \n{\ncaption\n:\n \nMacros\n,\n                \nsearch\n:\n \n{\npattern\n:\n \n*.sublime-macro\n,\n    \nregex\n:\n \nfalse\n}},\n\n        \n{\ncaption\n:\n \nMenus\n,\n                 \nsearch\n:\n \n{\npattern\n:\n \n*.sublime-menu\n,\n     \nregex\n:\n \nfalse\n}},\n\n        \n{\ncaption\n:\n \nPreferences\n,\n           \nsearch\n:\n \n{\npattern\n:\n \n*.tmPreferences\n,\n    \nregex\n:\n \nfalse\n}},\n\n        \n{\ncaption\n:\n \nPython Source Files\n,\n   \nsearch\n:\n \n{\npattern\n:\n \n*.py\n,\n               \nregex\n:\n \nfalse\n}},\n\n        \n{\ncaption\n:\n \nReadme Files\n,\n          \nsearch\n:\n \n{\npattern\n:\n \n*readme*\n,\n           \nregex\n:\n \nfalse\n}},\n\n        \n{\ncaption\n:\n \nSettings\n,\n              \nsearch\n:\n \n{\npattern\n:\n \n*.sublime-settings\n,\n \nregex\n:\n \nfalse\n}},\n\n        \n{\ncaption\n:\n \nSnippets\n,\n              \nsearch\n:\n \n{\npattern\n:\n \n*.sublime-snippet\n,\n  \nregex\n:\n \nfalse\n}},\n\n        \n{\ncaption\n:\n \nThemes\n,\n                \nsearch\n:\n \n{\npattern\n:\n \n*.sublime-theme\n,\n    \nregex\n:\n \nfalse\n}}\n\n    \n],\n\n\n\n\n\n\nPackage File Search: Find Panel\n\n\nThe Find Panel command allows for an on demand custom search pattern that can be given to search all active packages.  The pattern is entered into a Sublime input panel.  To search with traditional wild cards, just enter your pattern into the input field.  To use regex, surround the regex in back tics.  This will search only the current active plugin files, unless you toggle \nFind All\n mode via the \nPackage File Search: Toggle Find All Mode\n command.  Then the command will search all plugin files regardless of whether they are the active plugin or being overridden.  This may give duplicate results, but they will be distinguished by their install location: \nDefault\n, \nInstalled Packages\n, and \nPackages\n.  When \nFind All\n mode is active, the command will be shown in the command palette as \nPackage File Search: Find Panel (Find All)\n.\n\n\nPackage File Search: Set Color Scheme File\n\n\nThis a command to allow you to look at all color scheme files in active package files and to set it as the current color scheme file.  It will give you a live preview of the color scheme before you select it.  This will only show color schemes that are currently active (not being overridden).\n\n\nPackage File Search: Toggle Find All Mode\n\n\nThe \nPackage File Search: Search Menu\n and  \nPackage File Search: Find Panel\n command by default search only the active plugin files (not the overridden plugin files).  But toggling \nFind All\n mode to \nTrue\n via this command will search all plugin files regardless of whether they are the active one or not.  This may give duplicate results, but they will be distinguished by their install location: \nDefault\n, \nInstalled Packages\n, and \nPackages\n.  When \nFind All\n mode is active, the commands will be shown in the command palette as \nPackage File Search: Search Menu (Find All)\n and \nPackage File Search: Find Panel (Find All)\n respectively.\n\n\nIf you desire \nFind All\n mode to be \nTrue\n by default, you can set the desired behavior in the \npackage_file_search.sublime-settings\n file.\n\n\n    \n// \nfind all\n means to look in every package regardless of whether\n\n    \n// it is being overridden.  This means you will see duplicate files if\n\n    \n// you have two instances of a plugin.\n\n    \nfind_all_by_default\n:\n \nfalse", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#user-guide", 
            "text": "Configuration and usage of PackageFileSearch.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#overview", 
            "text": "In order to use Package File Search, you can use one of the five commands:   Package File Search: Navigator  Package File Search: Extract  Package File Search: Search Menu  Package File Search: Find Panel  Package File Search: Set Color Scheme File", 
            "title": "Overview"
        }, 
        {
            "location": "/usage/#package-file-search-navigator", 
            "text": "This is a command that allows you to navigate all the plugins.  It allows you to navigate their file system even if they are archived in a sublime-package zip.  If plugins have some parts in a zip, and some parts unpacked overriding parts in the zip, PackageFileSearch will show a composite of the two with the override file taking precedence.  Unarchived files will open in an editable view.  Archived files will open in a read only view; you cannot directly modify the zipped files.", 
            "title": "Package File Search: Navigator"
        }, 
        {
            "location": "/usage/#package-file-search-extract", 
            "text": "The extract command allows you to unpack an archived plugin into the  Packages  folder if it has not already been done.", 
            "title": "Package File Search: Extract"
        }, 
        {
            "location": "/usage/#package-file-search-search-menu", 
            "text": "With this command, a menu of pre-defined searches will be displayed.  When one is selected, all of the packages will be searched based on the selected pre-defined search pattern.  This will search only the current active plugin files. If you toggle  Find All  mode via the  Package File Search: Toggle Find All Mode  command, it will search and find override files and the original file and even disabled plugins.  Duplicate results will be distinguished by their install location:  Default ,  Installed Packages , and  Packages .  When  Find All  mode is active, the command will be shown in the command palette as  Package File Search: Search Menu (Find All) .  You can add to the pre-defined list or change it completely in the  package_file_search.sublime-settings  file.  The setting name is  pattern_list  and it has 3 configurable parameters:     Parameter  Description      caption  The desired name to show up in the menu.    search  The search settings to be used ( pattern  and  regex ).    pattern  The wild card or regex pattern to be used.    regex  Whether the pattern is a regex pattern or not.     Examples :       // Default pre-set patterns \n     pattern_list :   [ \n         { caption :   Color Schemes ,           search :   { pattern :   *.tmTheme ,            regex :   false }}, \n         { caption :   Commands ,                search :   { pattern :   *.sublime-commands ,   regex :   false }}, \n         { caption :   Keymaps ,                 search :   { pattern :   *.sublime-keymap ,     regex :   false }}, \n         { caption :   Language Syntaxes ,       search :   { pattern :   *tmLanguage ,          regex :   false }}, \n         { caption :   Macros ,                  search :   { pattern :   *.sublime-macro ,      regex :   false }}, \n         { caption :   Menus ,                   search :   { pattern :   *.sublime-menu ,       regex :   false }}, \n         { caption :   Preferences ,             search :   { pattern :   *.tmPreferences ,      regex :   false }}, \n         { caption :   Python Source Files ,     search :   { pattern :   *.py ,                 regex :   false }}, \n         { caption :   Readme Files ,            search :   { pattern :   *readme* ,             regex :   false }}, \n         { caption :   Settings ,                search :   { pattern :   *.sublime-settings ,   regex :   false }}, \n         { caption :   Snippets ,                search :   { pattern :   *.sublime-snippet ,    regex :   false }}, \n         { caption :   Themes ,                  search :   { pattern :   *.sublime-theme ,      regex :   false }} \n     ],", 
            "title": "Package File Search: Search Menu"
        }, 
        {
            "location": "/usage/#package-file-search-find-panel", 
            "text": "The Find Panel command allows for an on demand custom search pattern that can be given to search all active packages.  The pattern is entered into a Sublime input panel.  To search with traditional wild cards, just enter your pattern into the input field.  To use regex, surround the regex in back tics.  This will search only the current active plugin files, unless you toggle  Find All  mode via the  Package File Search: Toggle Find All Mode  command.  Then the command will search all plugin files regardless of whether they are the active plugin or being overridden.  This may give duplicate results, but they will be distinguished by their install location:  Default ,  Installed Packages , and  Packages .  When  Find All  mode is active, the command will be shown in the command palette as  Package File Search: Find Panel (Find All) .", 
            "title": "Package File Search: Find Panel"
        }, 
        {
            "location": "/usage/#package-file-search-set-color-scheme-file", 
            "text": "This a command to allow you to look at all color scheme files in active package files and to set it as the current color scheme file.  It will give you a live preview of the color scheme before you select it.  This will only show color schemes that are currently active (not being overridden).", 
            "title": "Package File Search: Set Color Scheme File"
        }, 
        {
            "location": "/usage/#package-file-search-toggle-find-all-mode", 
            "text": "The  Package File Search: Search Menu  and   Package File Search: Find Panel  command by default search only the active plugin files (not the overridden plugin files).  But toggling  Find All  mode to  True  via this command will search all plugin files regardless of whether they are the active one or not.  This may give duplicate results, but they will be distinguished by their install location:  Default ,  Installed Packages , and  Packages .  When  Find All  mode is active, the commands will be shown in the command palette as  Package File Search: Search Menu (Find All)  and  Package File Search: Find Panel (Find All)  respectively.  If you desire  Find All  mode to be  True  by default, you can set the desired behavior in the  package_file_search.sublime-settings  file.       //  find all  means to look in every package regardless of whether \n     // it is being overridden.  This means you will see duplicate files if \n     // you have two instances of a plugin. \n     find_all_by_default :   false", 
            "title": "Package File Search: Toggle Find All Mode"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\n\nSteps for contributing and getting support.\n\n\n\n\nOverview\n\n\n\n\nWarning\n\n\nThis plugin is a personal plugin, and while I don\nt restrict anyone from using it, I really don\nt plan on offer much, if any support.  But I am open to pull requests, and I \nmight\n respond to some issues without closing them on occasion.  I already support a lot of plugins and repos, and there are already well \nsupported alternatives on Package Control\n.\n\n\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nSublime Text build.\n\n\nOperating system.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nFeel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.\n\n\nRunning Validation Tests\n\n\n\n\nTip\n\n\nIf you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):\n\n\nchmod +x run_tests.sh\n./run_tests.sh\n\n\n\n\n\n\n\nThere are a couple of dependencies that must be present before running the tests.\n\n\n\n\n\n\nAs \nST3\n is the only current, actively supported version, Python 3.3 must be used to validate the tests.\n\n\n\n\n\n\nUnit tests are run with \nnose\n.  You can install nose via:\n\n\npip install nose\n\n\n\n\n\nThe tests should be run from the root folder of the plugin by using the following command:\n\n\nnosetests .\n\n\n\n\n\n\n\n\n\nLinting is performed on the entire project with \nflake8\n, \nflake8_docstrings\n, \npep8-naming\n.  These can be installed via:\n\n\npip install flake8\npip install flake8_docstrings\npip install pep8-naming\n\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\n\n\n\n\nDocumentation Improvements\n\n\nA ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn\nt be any need to run validation tests if only updating documentation.\n\n\nYou don\nt have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of \nmkdocs\n with my own custom Python Markdown \nextensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n from the root directory.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#contributing-support", 
            "text": "Steps for contributing and getting support.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Warning  This plugin is a personal plugin, and while I don t restrict anyone from using it, I really don t plan on offer much, if any support.  But I am open to pull requests, and I  might  respond to some issues without closing them on occasion.  I already support a lot of plugins and repos, and there are already well  supported alternatives on Package Control .      Sublime Versions  Description      ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Sublime Text build.  Operating system.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.  Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.  Feel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.  Running Validation Tests   Tip  If you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):  chmod +x run_tests.sh\n./run_tests.sh   There are a couple of dependencies that must be present before running the tests.    As  ST3  is the only current, actively supported version, Python 3.3 must be used to validate the tests.    Unit tests are run with  nose .  You can install nose via:  pip install nose  The tests should be run from the root folder of the plugin by using the following command:  nosetests .    Linting is performed on the entire project with  flake8 ,  flake8_docstrings ,  pep8-naming .  These can be installed via:  pip install flake8\npip install flake8_docstrings\npip install pep8-naming  Linting is performed with the following command:  flake8 .", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn t be any need to run validation tests if only updating documentation.  You don t have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of  mkdocs  with my own custom Python Markdown  extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve  from the root directory.", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\n\n\nPackageFileSearch is released under the MIT license.\n\n\nCopyright \n 2013 - 2015 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \nSoftware\n), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "PackageFileSearch is released under the MIT license.  Copyright   2013 - 2015 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE", 
            "title": "License"
        }
    ]
}